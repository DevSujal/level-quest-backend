generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int     @id @default(autoincrement())
  name            String
  email           String  @unique
  profilePic      String?
  password        String
  refreshToken    String?
  level           Int     @default(1)
  exp             Int     @default(50)
  health          Int     @default(100)
  coins           Int     @default(1000)
  job             String?
  about           String?
  strength        String?
  weakness        String?
  masterObjective String?
  minorObjective  String?

  stats           Stat[]
  inventory       Item[]
  tasks           Task[]
  quests          Quest[]
  dailyChallenges DailyChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stat {
  id        Int      @id @default(autoincrement())
  skill     String
  level     Int      @default(1)
  value     Int      @default(0)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id             Int     @id @default(autoincrement())
  name           String
  description    String
  price          Int
  image          String
  type           String
  amount         Int
  claimed        Boolean @default(false)
  attribute_name String?

  userId    Int // Nullable for store items
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id
  name        String
  isCompleted Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quest {
  id          Int      @id @default(autoincrement())
  image       String
  name        String
  endDate     DateTime
  description String
  priority    String
  status      String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  rewards   Reward[]
  subQuests SubQuest[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SubQuest {
  id        Int     @id @default(autoincrement())
  name      String
  completed Boolean
  claim     Boolean
  questId   Int
  quest     Quest   @relation(fields: [questId], references: [id])

  rewards   Reward[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id     Int     @id @default(autoincrement())
  type   String
  amount Int? // for coins, experience, health
  skill  String? // for skill rewards

  questId    Int? // optional relation
  subQuestId Int? // optional relation

  quest     Quest?    @relation(fields: [questId], references: [id])
  subQuest  SubQuest? @relation(fields: [subQuestId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model DailyChallenge {
  id          Int       @id @default(autoincrement())
  date        DateTime
  claimedDate DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  challenges Challenge[]
  history    ChallengeHistory[]
  rewards    DailyReward[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Challenge {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  completed   Boolean
  skill       String?
  dailyId     Int
  daily       DailyChallenge @relation(fields: [dailyId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ChallengeHistory {
  id             Int            @id @default(autoincrement())
  date           DateTime
  rewardsClaimed Boolean
  dailyId        Int
  daily          DailyChallenge @relation(fields: [dailyId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model DailyReward {
  id        Int            @id @default(autoincrement())
  type      String
  amount    Int
  dailyId   Int
  daily     DailyChallenge @relation(fields: [dailyId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}
